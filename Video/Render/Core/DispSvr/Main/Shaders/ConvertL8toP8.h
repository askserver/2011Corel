#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.23.949.2378
//
//   fxc /T ps_2_0 /Fh ConvertL8toP8.h -E ConvertL8toP8_AA_PS ConvertL8toP8.psh
//
//
// Parameters:
//
//   sampler2D IndexSampler;
//   sampler2D PaletteSampler;
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   IndexSampler   s0       1
//   PaletteSampler s1       1
//

    ps_2_0
    def c0, 0.99609375, 0.001953125, 0, 0
    dcl t0.xy
    dcl t1.xy
    dcl t2.xy
    dcl t3.xy
    dcl t4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, t0, s0
    texld r1, t1, s0
    texld r2, t2, s0
    texld r3, t3, s0
    mad r0.xy, r0.x, c0.x, c0.y
    mad r1.xy, r1.x, c0.x, c0.y
    mad r2.xy, r2.x, c0.x, c0.y
    mad r3.xy, r3.x, c0.x, c0.y
    texld r0, r0, s1
    texld r1, r1, s1
    texld r2, r2, s1
    texld r3, r3, s1
    frc r4.xy, t4
    lrp r5, r4.x, r1, r0
    lrp r0, r4.x, r3, r2
    lrp r1, r4.y, r0, r5
    mov oC0, r1

// approximately 17 instruction slots used (8 texture, 9 arithmetic)
#endif

const DWORD g_ps20_ConvertL8toP8_AA_PS[] =
{
    0xffff0200, 0x002cfffe, 0x42415443, 0x0000001c, 0x0000007a, 0xffff0200, 
    0x00000002, 0x0000001c, 0x20000100, 0x00000073, 0x00000044, 0x00000003, 
    0x00000001, 0x00000054, 0x00000000, 0x00000064, 0x00010003, 0x00000001, 
    0x00000054, 0x00000000, 0x65646e49, 0x6d615378, 0x72656c70, 0xababab00, 
    0x000c0004, 0x00010001, 0x00000001, 0x00000000, 0x656c6150, 0x53657474, 
    0x6c706d61, 0x70007265, 0x5f325f73, 0x694d0030, 0x736f7263, 0x2074666f, 
    0x20295228, 0x4c534c48, 0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 
    0x322e3920, 0x34392e33, 0x33322e39, 0xab003837, 0x05000051, 0xa00f0000, 
    0x3f7f0000, 0x3b000000, 0x00000000, 0x00000000, 0x0200001f, 0x80000000, 
    0xb0030000, 0x0200001f, 0x80000000, 0xb0030001, 0x0200001f, 0x80000000, 
    0xb0030002, 0x0200001f, 0x80000000, 0xb0030003, 0x0200001f, 0x80000000, 
    0xb0030004, 0x0200001f, 0x90000000, 0xa00f0800, 0x0200001f, 0x90000000, 
    0xa00f0801, 0x03000042, 0x800f0000, 0xb0e40000, 0xa0e40800, 0x03000042, 
    0x800f0001, 0xb0e40001, 0xa0e40800, 0x03000042, 0x800f0002, 0xb0e40002, 
    0xa0e40800, 0x03000042, 0x800f0003, 0xb0e40003, 0xa0e40800, 0x04000004, 
    0x80030000, 0x80000000, 0xa0000000, 0xa0550000, 0x04000004, 0x80030001, 
    0x80000001, 0xa0000000, 0xa0550000, 0x04000004, 0x80030002, 0x80000002, 
    0xa0000000, 0xa0550000, 0x04000004, 0x80030003, 0x80000003, 0xa0000000, 
    0xa0550000, 0x03000042, 0x800f0000, 0x80e40000, 0xa0e40801, 0x03000042, 
    0x800f0001, 0x80e40001, 0xa0e40801, 0x03000042, 0x800f0002, 0x80e40002, 
    0xa0e40801, 0x03000042, 0x800f0003, 0x80e40003, 0xa0e40801, 0x02000013, 
    0x80030004, 0xb0e40004, 0x04000012, 0x800f0005, 0x80000004, 0x80e40001, 
    0x80e40000, 0x04000012, 0x800f0000, 0x80000004, 0x80e40003, 0x80e40002, 
    0x04000012, 0x800f0001, 0x80550004, 0x80e40000, 0x80e40005, 0x02000001, 
    0x800f0800, 0x80e40001, 0x0000ffff
};
