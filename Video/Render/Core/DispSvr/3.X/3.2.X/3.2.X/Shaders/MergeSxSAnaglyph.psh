// Pixel shader to merge a side by side input texture to anaglyph image with a half of the input width.

sampler texture0 : TEXTURE0;

float intensity(float3 RGB)
{
	return dot(RGB, float3(0.299, 0.587, 0.114));
}

float3 rgb_to_yuv(float3 RGB)
{
    float y = dot(RGB, float3(0.299,0.587,0.114));
    float u = (RGB.z - y) * 0.565;
    float v = (RGB.x - y) * 0.713;
    return float3(y,u,v);
}

float3 yuv_to_rgb(float3 YUV)
{
   float u = YUV.y;
   float v = YUV.z;
   float r = YUV.x + 1.403*v;
   float g = YUV.x - 0.344*u - 0.714*v;
   float b = YUV.x + 1.770*u;
   return float3(r,g,b);
}

float __min_channel(float3 v)
{
    float t = (v.x<v.y) ? v.x : v.y;
    t = (t<v.z) ? t : v.z;
    return t;
}

float __max_channel(float3 v)
{
    float t = (v.x>v.y) ? v.x : v.y;
    t = (t>v.z) ? t : v.z;
    return t;
}

float3 rgb_to_hsv(float3 RGB)
{
    float3 HSV = (0.0).xxx;
    float minVal = __min_channel(RGB);
    float maxVal = __max_channel(RGB);
    float delta = maxVal - minVal;             //Delta RGB value 
    HSV.z = maxVal;
    if (delta != 0) {                    // If gray, leave H & S at zero
       HSV.y = delta / maxVal;
       float3 delRGB;
       delRGB = ( ( ( maxVal.xxx - RGB ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
       if      ( RGB.x == maxVal ) HSV.x = delRGB.z - delRGB.y;
       else if ( RGB.y == maxVal ) HSV.x = ( 1.0/3.0) + delRGB.x - delRGB.z;
       else if ( RGB.z == maxVal ) HSV.x = ( 2.0/3.0) + delRGB.y - delRGB.x;
       if ( HSV.x < 0.0 ) { HSV.x += 1.0; }
       if ( HSV.x > 1.0 ) { HSV.x -= 1.0; }
    }
    return (HSV);
}

float3 hsv_to_rgb(float3 HSV)
{
    float3 RGB = HSV.z;
    if ( HSV.y != 0 ) {
       float var_h = HSV.x * 6;
       float var_i = floor(var_h);   // Or ... var_i = floor( var_h )
       float var_1 = HSV.z * (1.0 - HSV.y);
       float var_2 = HSV.z * (1.0 - HSV.y * (var_h-var_i));
       float var_3 = HSV.z * (1.0 - HSV.y * (1-(var_h-var_i)));
       if      (var_i == 0) { RGB = float3(HSV.z, var_3, var_1); }
       else if (var_i == 1) { RGB = float3(var_2, HSV.z, var_1); }
       else if (var_i == 2) { RGB = float3(var_1, HSV.z, var_3); }
       else if (var_i == 3) { RGB = float3(var_1, var_2, HSV.z); }
       else if (var_i == 4) { RGB = float3(var_3, var_1, HSV.z); }
       else                 { RGB = float3(HSV.z, var_1, var_2); }
   }
   return (RGB);
}

float3 adj_saturation_inyuv(float3 RGB, float saturation)
{
	float3 yuv = rgb_to_yuv(RGB);
	
	yuv.yz *= saturation;
	yuv.yz = clamp(yuv.yz, -0.5, 0.5);
	return yuv_to_rgb(yuv);
}

float3 adj_saturation(float3 RGB, float saturation)
{
	float3 yuv = rgb_to_hsv(RGB);
	
	yuv.y *= saturation;
	return hsv_to_rgb(yuv);
}

float4 MergeSxSAnaglyph_PS(float4 texCoord : TEXCOORD0) : COLOR
{
	float4 leftview = tex2D(texture0, texCoord.xy);
	float4 rightview = tex2D(texture0, texCoord.zw);

	float4 c = float4(leftview.r, rightview.g, rightview.b, 1.0);
	return c;
}

float4 MergeSxSHalfColorAnaglyph_PS(float4 texCoord : TEXCOORD0) : COLOR
{
	float4 leftview = tex2D(texture0, texCoord.xy);
	float4 rightview = tex2D(texture0, texCoord.zw);

	float4 c = float4(intensity(leftview.rgb), rightview.g, rightview.b, 1.0);
	return c;
}

// Optimized anaglyph:
// http://www.3dtv.at/knowhow/AnaglyphComparison_en.aspx
// to reduce binocular rivalry, but partial color reproduction.
//
float4 MergeSxSOptimizedAnaglyph_PS(float4 texCoord : TEXCOORD0) : COLOR
{
	float4 leftview = tex2D(texture0, texCoord.xy);
	float4 rightview = tex2D(texture0, texCoord.zw);

	float r = pow(dot(leftview.rgb, float3(0, 0.7, 0.3)), 1 / 1.5);
	float4 c = float4(r, rightview.g, rightview.b, 1.0);
	return c;
}

float4 MergeSxSHalfColor2Anaglyph_PS(float4 texCoord : TEXCOORD0, uniform float saturation) : COLOR
{
	float3 leftview = tex2D(texture0, texCoord.xy).xyz;
	float3 rightview = tex2D(texture0, texCoord.zw).xyz;

	leftview.r = intensity(leftview);
	rightview.r = intensity(rightview);
	
	float4 color;

	color.r = adj_saturation(leftview, saturation).r;
	color.gb = adj_saturation(rightview, saturation).gb;
	color.a = 1;

	return color;
}

#ifdef HC2_ADJ_IN_YUV
float4 MergeSxSHalfColor2Anaglyph_PS(float4 texCoord : TEXCOORD0, uniform float saturation) : COLOR
{
	float4 color = MergeSxSHalfColorAnaglyph_PS(texCoord);
	float3 yuv = rgb_to_yuv(color.xyz);
	
	yuv.yz *= saturation;
	color.xyz = yuv_to_rgb(yuv);
	return color;
}
#endif

#ifdef HC2_ADJ_AFTER_MERGE
float4 MergeSxSHalfColor2Anaglyph_PS(float4 texCoord : TEXCOORD0, uniform float saturation) : COLOR
{
	float4 color = MergeSxSHalfColorAnaglyph_PS(texCoord);

	color.xyz = adj_saturation(color.xyz, saturation);

	return color;
}
#endif