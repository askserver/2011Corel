//////////////////////////////////////////////////////////////////
//	Confidential material.  Copyright 2008 Corel, Inc.
//	All Rights Reserved.
#ifndef _ISMPGMOBridge_H
#define _ISMPGMOBridge_H

#include "ISMP.h"

#define SPCONNECTION_MAGIC_CODE 0xfefeaabb

enum
{ 
	ISMPGMO_DATA_ENCRYPT = 0xAF3E16FC,
	ISMPGMO_DATA_NO_ENCRYPT = 0x3EAF16FD,
};

class IGMediaBuffer;

class ISMPGMOBridge{
	// ============================================================================================= //
	//                                          Attributes                                           //
	// ============================================================================================= //
private:
	struct IsmpInputObject *m_data_input;
	struct IsmpOutputObject *m_data_output;

	// ============================================================================================= //
	//                                          Operations                                           //
	// ============================================================================================= //
private:
	// Output_Open
	//
	//   Purpose: Open ISMP session for IsmpOutput object.
	//   Params:  requestdata    [IN]  16 bytes of data coming from ISMP-input object
	//            datastreamtype [IN]  32-bit unsigned integer that is shared between ISMP-input & ISMP-output objects.
	//            responsedata   [OUT] Pointer to 16-byte buffer that receives response data.
	//   Return:  true  = success in opening session
	//            false = fail to open session
	BOOL __stdcall Output_Open( const BYTE *requestdata, DWORD datastreamtype, BYTE *responsedata);

	// Input_Open
	//
	//   Purpose: Open ISMP session for ISMP-input object.
	//   Params:  requestdata    [OUT] 16 bytes of data generated by this function.
	//            datastreamtype [IN]  32-bit unsigned integer that is shared between ISMP-input & ISMP-output objects.
	//   Return:  true  = success in opening session
	//            false = fail to open session
	BOOL __stdcall Input_Open(BYTE *requestdata, DWORD datastreamtype);

	// Output_VerifyResponse
	//
	//   Purpose: Verify the response coming from ISMP-output object
	//   Params:  responsedata [IN] Pointer to 16 bytes of response data coming from ISMP-output object
	//   Return:  true  = Authentication succeeded, and session key established.
	//            false = Authentication failed; the ISMP-output object is not accepted.
	BOOL __stdcall Output_VerifyResponse(BYTE *responsedata);

public:
	ISMPGMOBridge();
	~ISMPGMOBridge();
	// ScrambleGMediaBuffer
	//
	//   Purpose: Scramble GMedia buffer. 
	//   Params:  pBuffer  [IN/OUT]  Pointer to GMedia buffer
	//            enable   [IN] 4-byte unsigned integer that is ISMPGMO_DATA_ENCRYPT/ISMPGMO_DATA_NO_ENCRYPT to enable/disable encrypt GMediabuffer
	//            size     [IN] 4-byte unsigned integer that is the size you want to encrypt in GMediabuffer
	//            offset   [IN] 4-byte unsigned integer that is start point you want to encrypt in GMediabuffer (default = 0)
	//   Return:  true  = success
	//            false = failed
	BOOL __stdcall ScrambleGMediaBuffer(IGMediaBuffer *pBuffer, unsigned int enable, unsigned int size, unsigned offset=0);

	// DescrambleGMediaBuffer
	//
	//   Purpose: Descramble GMedia buffer. 
	//   Params:  pBuffer  [IN/OUT]  Pointer to GMedia buffer
	//            enable   [OUT] pointer to 4-byte unsigned integer that is ISMPGMO_DATA_ENCRYPT/ISMPGMO_DATA_NO_ENCRYPT to enable/disable encrypt GMediabuffer
	//            size     [OUT] pointer to 4-byte unsigned integer that is the size you want to encrypt in GMediabuffer
	//            offset   [OUT] pointer to 4-byte unsigned integer that is start point you want to encrypt in GMediabuffer
	//   Return:  true  = success
	//            false = failed
	BOOL __stdcall DescrambleGMediaBuffer(IGMediaBuffer *pBuffer, UINT *enable = 0, UINT *size = 0, UINT *offset = 0);

	// SPConnect_GMO
	//
	//   Purpose: To establish session key.
	//   Params:  pData				[IN] pointer to ISMP object
	//			  datastreamtype    [IN] connect type
	HRESULT __stdcall SPConnect( void *pData,
				                 DWORD datastreamtype);
};

#endif